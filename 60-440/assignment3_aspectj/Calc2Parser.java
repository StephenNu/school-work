


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Feb 26 22:24:09 EST 2006
//----------------------------------------------------


/** CUP v0.10k generated parser.
  * @version Sun Feb 26 22:24:09 EST 2006
  */
public class Calc2Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Calc2Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Calc2Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\005\003\000\002\002\004\000\002\005" +
    "\004\000\002\004\004\000\002\006\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\004\004\004\001\002\000\004\007\013\001" +
    "\002\000\004\002\012\001\002\000\006\002\001\004\004" +
    "\001\002\000\004\010\010\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\010\004\014\005\016\013\015\001\002\000" +
    "\012\006\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\012" +
    "\006\ufff9\010\ufff9\011\ufff9\012\ufff9\001\002\000\010\004" +
    "\014\005\016\013\015\001\002\000\010\010\ufffd\011\020" +
    "\012\021\001\002\000\010\004\014\005\016\013\015\001" +
    "\002\000\010\004\014\005\016\013\015\001\002\000\012" +
    "\006\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\012\006" +
    "\ufffc\010\ufffc\011\ufffc\012\021\001\002\000\010\006\025" +
    "\011\020\012\021\001\002\000\012\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\004\005\005\004\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\005\005\010" +
    "\006\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\023\001" +
    "\001\000\002\001\001\000\004\003\022\001\001\000\004" +
    "\003\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Calc2Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Calc2Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Calc2Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Calc2Parser$actions {
  private final Calc2Parser parser;

  /** Constructor */
  CUP$Calc2Parser$actions(Calc2Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Calc2Parser$do_action(
    int                        CUP$Calc2Parser$act_num,
    java_cup.runtime.lr_parser CUP$Calc2Parser$parser,
    java.util.Stack            CUP$Calc2Parser$stack,
    int                        CUP$Calc2Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Calc2Parser$result;

      /* select the action based on the action number */
      switch (CUP$Calc2Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= ID 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT = new Expr(e); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= NUMBER 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT= new Expr(e); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		 RESULT = e; 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MULTI expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT = new Expr(e1, e2, e); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT = new Expr(e1, e2, e); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // assignment ::= ID EQUAL expr 
            {
              Assignment RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT = new Assignment(e1, e2); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(4/*assignment*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= assignment SEMI 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		Assignment e = (Assignment)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		 RESULT = e; 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= statement program 
            {
              Program RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Program e2 = (Program)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT=new Program(e1, e2); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(3/*program*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).value;
		RESULT = start_val;
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Calc2Parser$parser.done_parsing();
          return CUP$Calc2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement 
            {
              Program RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).value;
		 RESULT = new Program(e); 
              CUP$Calc2Parser$result = new java_cup.runtime.Symbol(3/*program*/, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Calc2Parser$stack.elementAt(CUP$Calc2Parser$top-0)).right, RESULT);
            }
          return CUP$Calc2Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

